scalar Date

scalar DateTime

scalar DateTimeOffset

scalar Decimal

scalar Milliseconds

type Mutation {
  addProject(projectInput: ProjectInputType!): ProjectType
  addTag(name: String!): TagType
  addTagForTask(taskId: ID!, tagId: ID!): String!
  addTask(taskInput: TaskInputType!): TaskType
  deleteProject(projectId: ID!): ProjectDeletePayloadType
  deleteTag(id: ID!): TagDeletePayloadType
  deleteTask(id: ID!): TaskDeletePayloadType
  toggleTaskCompleted(taskId: ID!, completed: Boolean!): TaskType
  updateProject(projectId: ID!, projectInput: ProjectInputType!): ProjectType
  updateTask(taskId: ID!, taskInput: TaskInputType!): TaskType
}

type ProjectDeletePayloadType {
  deletedProjectId: ID
}

input ProjectInputType {
  name: String!
  description: String = null
  deadline: Date = null
}

type ProjectType {
  created: DateTime!
  deadline: Date
  description: String
  id: ID!
  name: String!
  taskCount: Int!
  tasks(priority: TaskPriority = null, openOnly: Boolean = false): [TaskType!]!
  uncompletedTaskCount: Int!
}

type Query {
  project(id: ID!): ProjectType!
  projects: [ProjectType!]!
  search(searchString: String = null): [SearchResult!]!
  tags: [TagType!]!
  task(id: ID!): TaskType!
  tasks(
    projectId: ID = null
    onlyTasksWithoutProject: Boolean = null
  ): [TaskType!]!
}

union SearchResult = ProjectType | TaskType
scalar Seconds

type TagDeletePayloadType {
  deletedTagId: ID
}

type TagType {
  created: DateTime
  id: ID
  name: String!
}

type TaskDeletePayloadType {
  deletedTaskId: ID
  project: ProjectType
}

input TaskInputType {
  title: String!
  projectId: ID = null
  description: String = null
  priority: TaskPriority = null
  deadline: DateTime = null
}

enum TaskPriority {
  NORMAL
  LOW
  HIGH
  VERY_HIGH
}

type TaskType {
  completedOn: DateTime
  created: DateTime!
  deadline: DateTime
  description: String
  id: ID!
  isCompleted: Boolean!
  priority: TaskPriority!
  project: ProjectType
  tags: [TagType!]!
  title: String!
}